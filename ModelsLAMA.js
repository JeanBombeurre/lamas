let inu=[]
let inuL=[]
let inuC=[]
for(let i=0;i<3;i++){
	let a=i/3*Math.PI*2
	let b=i/3*Math.PI*2-Math.PI*2/6
	let c=a-Math.PI*2/20
	let p1=new PtPol(8/10*5,a,0).cart()
	let p2=new PtPol(1/10*5,b,0).cart()
	let p3=new PtPol(3,c,0).cart()
	inu.push(p2)
	inu.push(p3)
	inu.push(p1)
	let p4=new PtPol(2.5,c+Math.PI/60,0).cart()
	p4.x-=0.1
	inu.push(p4)
	let p5=new PtPol(1/10*4.5,b,0).cart()
	p5.x-=0.1
	inu.push(p5)
	let j=i*5
	inuL.push([j,j+1,j+2,(j+3+2)%15])
	inuL.push([j,j+4,j+3])
	inuL.push([j+1,j,j+3])
	inuL.push([j+1,j+3,j+2])
	inuL.push([j+4,j+3,(j+5+4)%15])
	inuL.push([j+3,j+2,(j+5)%15])
	inuL.push([j+3,(j+5+4)%15,(j+5)%15])
	inuC.push([0,0,1])
	inuC.push([0,0,1])
	inuC.push([0.2,0.2,0.2])
	inuC.push([0.2,0.2,0.2])
	inuC.push([0.3,0.3,0.8])
	inuC.push([0,0,1])
	inuC.push([0.2,0.2,0.2])
	
	
}
inuL.push([0,5,10])
inuL.push([4,9,14])
inuC.push([1,1,1])
inuC.push([1,1,1])
new Model(inu,inuL,inuC,"boomerang")
new Model([p(0,0.1,0.1),p(0,0.1,-0.1),p(0,-0.1,-0.1),p(0,-0.1,0.1),p(1,0.1,0.1),p(1,0.1,-0.1),p(1,-0.1,-0.1),p(1,-0.1,0.1),p(1,0.3,0.3),p(1,0.3,-0.3),p(1,-0.3,-0.3),p(1,-0.3,0.3),p(2,0,0)],[[0,1,2,3],[0,1,5,4],[1,2,6,5],[2,3,7,6],[3,0,4,7],[4,5,9,8],[5,6,10,9],[6,7,11,10],[7,4,8,11],[8,9,12],[9,10,12],[10,11,12],[11,8,12]],"randomRouge","fleche")
let lSol=[]
let lCSol=[]
let lLSol=[]
let i=0
for(let x=-10;x<10;x++){
	for(let y=-10;y<10;y++){
		lSol.push(p(x*5,0,y*5))
		if(x<9 && y<9){
			lLSol.push([i,i+1,i+21])
			lLSol.push([i,i+20,i+21])
			let ru=0.5//Math.random()
			lCSol.push([ru,ru,ru])
			ru=0.4//Math.random()
			lCSol.push([ru,ru,ru])
		}
		i++
	}
}
new Model(lSol,lLSol,lCSol,"sol")
new Model([p(1,1,2),p(-1,1,2),p(-1,-1,2),p(1,-1,2),p(1,1,-2),p(-1,1,-2),p(-1,-1,-2),p(1,-1,-2),p(0.9,-1,1.9),p(0.9,-1,1.5),p(0.9,-2,1.9),p(0.9,-2,1.5),p(-0.9,-1,1.9),p(-0.9,-1,1.5),p(-0.9,-2,1.9),p(-0.9,-2,1.5),/**/p(0.9,-1,-1.9),p(0.9,-1,-1.5),p(0.9,-2,-1.9),p(0.9,-2,-1.5),p(-0.9,-1,-1.9),p(-0.9,-1,-1.5),p(-0.9,-2,-1.9),p(-0.9,-2,-1.5)/**/,p(0,-0.3,2),p(0,0.8,3),p(0,2,3),p(0,2,2)/**/,p(0.5,2,2),p(-0.5,2,2),p(-0.5,2,3.5),p(0.5,2,3.5),p(0.5,3,2),p(-0.5,3,2),p(-0.5,3,3.5),p(0.5,3,3.5)/**/,p(0.4,2.9,2.3),p(0.8,2.9,2.3),p(0.8,3.5,2.3),p(0.4,3.5,2.3),p(-0.4,2.9,2.3),p(-0.8,2.9,2.3),p(-0.8,3.5,2.3),p(-0.4,3.5,2.3),p(0.2,0.5,-2),p(-0.2,0.5,-2),p(-0.2,0,-2.3),p(0.2,0,-2.3)],
[[0,1,2,3],[4,5,6,7],[0,1,5,4],[1,2,6,5],[2,3,7,6],[3,0,4,7],[8,9,11,10],[12,13,15,14],[16,17,19,18],[20,21,23,22],[24,25,26,27],[28,29,30,31],[32,33,34,35],[28,29,33,32],[29,30,34,33],[30,31,35,34],[31,28,32,35],[36,37,38,39],[40,41,42,43],[44,45,46,47]],
[[0.8,0.7,0.5],[0.8,0.7,0.5],[0.4,0.35,0.25],[0.8,0.7,0.5],[0.8,0.7,0.5],[0.8,0.7,0.5],/**/[0.6,0.5,0.3], [0.6,0.5,0.3],[0.6,0.5,0.3],[0.6,0.5,0.3]/**/,[0.9,0.8,0.6],/**/[0.6,0.5,0.3],[0.6,0.5,0.3],[0.6,0.5,0.3],[0.6,0.5,0.3],[0.6,0.5,0.3],[0.6,0.5,0.3]/**/,[0.2,0.15,0.05],[0.2,0.15,0.05],[0,0,0]],"lama")


let inuroue=[p(-0.2,0,0),p(0.2,0,0)]
let inu2roue=[]
let inu3roue=[]
let np=40
for(let i=0;i<np;i++){
	let a=Math.PI*2/np*i
	inuroue.push(p(-0.2,Math.sin(a)*1,Math.cos(a)*1))
	inuroue.push(p(0.2,Math.sin(a)*1,Math.cos(a)*1))
	inu2roue.push([1,inuroue.length-1,(inuroue.length-2+1)%(np*2)+2])
	inu2roue.push([0,inuroue.length-2,(inuroue.length-2)%(np*2)+2])
	inu2roue.push([inuroue.length-1,inuroue.length-2,(inuroue.length-3+1)%(np*2)+2,(inuroue.length-2+1)%(np*2)+2])
	inu3roue.push([0.7-(i%8)/7*0.5,0.7-(i%8)/7*0.5,0.7-(i%8)/7*0.5])
	inu3roue.push([0.7-(i%8)/7*0.5,0.7-(i%8)/7*0.5,0.7-(i%8)/7*0.5])
	inu3roue.push([(i%8)/7*0.5,(i%8)/7*0.5,(i%8)/7*0.5])
}
new Model(inuroue,inu2roue,inu3roue,"roue")

let inumoto=[p(-1,1,0),p(-1,1.5,1.3),p(-1.2,1.1,1.9),p(-0.8,-0.5,0),p(-0.4,1,-2)]///
let inu2moto=[]
let lksmoto=[[0,1,2],[0,2,3],[0,3,4]]//
let lks2moto=[]
let cmoto=[[0.5,0.5,0.5],[0.4,0.4,0.4],[0.5,0.5,0.5]]//
let c2moto=[]
for(let i=0;i<inumoto.length;i++){inu2moto.push(inumoto[i])}
for(let i=0;i<inumoto.length;i++){
	inu2moto.push(p(-inumoto[i].x,inumoto[i].y,inumoto[i].z))
	lks2moto.push([i,inumoto.length+i,inumoto.length+(i+1)%inumoto.length,(i+1)%inumoto.length])
	c2moto.push([0,0,0])
}
for(let i=0;i<lksmoto.length;i++){
	lks2moto.push(lksmoto[i])
	let inu=[]
	for(let j=0;j<lksmoto[i].length;j++){
		inu.push(lksmoto[i][j]+inumoto.length)
	}
	lks2moto.push(inu)
	c2moto.push(cmoto[i],cmoto[i])
}
new Model(inu2moto,lks2moto,c2moto,"moto")

let sl1=[]
let slc=[]
for(let i=0;i<40;i++){
	sl1.push(p(Math.cos(i/40*Math.PI*2,),0,Math.sin(i/40*Math.PI*2)))
}
let sll=[range(40)]
for(let i=0;i<40-2;i++){slc.push([249/255,215/255,28/255])}
new Model(sl1,sll,slc,"soleil")

///voiture ( -5 +5 )*1.5
let v1=[p(-2,0,6),p(2,0,6),p(2,0,-4),p(-2,0,-4),p(-2,4,5.5),p(2,4,5.5),p(-2,4,2),p(2,4,2),p(-2,0.5,2),p(2,0.5,2),p(-2,0.5,-4),p(2,0.5,-4),p(-2,0,2),p(2,0,2)]
let vl=[[0,1,2,3],[0,1,5,4],[4,5,7,6],[6,7,9,8],[0,3,10,8,6,4],[1,2,11,9,7,5],[2,3,10,11],[8,12,13,9]]
let vc=[[0.7,0.7,0.7],[1,1,1],[0,0,0],[0.5,0.5,0.5],[0.2,0.1,0.2],[0.2,0.1,0.2],[0.1,0.1,0.1],[1,1,1]]
for(let i=0;i<v1.length;i++){
	v1[i].z+=-1
	v1[i]=v1[i].times(1.5)
}
new Model(v1,vl,vc,'voiture')


//start fond
let lst=[]
let l2st=[]
let cst=[]
w=15
let h=7
for(let j=0;j<h;j++){
	for(let i=0;i<w;i++){
		lst.push(p(i,j,0))
		if(i!=w-1 && j!=h-1){
			l2st.push([lst.length-1,lst.length,lst.length+w,lst.length+w-1])
			cst.push([(i+j)%2*0.2+0.7,0.9,0.9])
		}
	}
}
new Model(lst,l2st,cst,"fond")
Model.l.fond.equilibreCentreGrav()


new Model([p(-1,-1,-1),p(1,-1,-1),p(1,1,-1),p(-1,1,-1),p(-1,-1,1),p(1,-1,1),p(1,1,1),p(-1,1,1),p(-0.3,-0.3,1),p(0.3,-0.3,1),p(0.3,0.3,1),p(-0.3,0.3,1),p(-0.3,-0.3,3),p(0.3,-0.3,3),p(0.3,0.3,3),p(-0.3,0.3,3),p(0.5,0.5,3),p(-0.5,0.5,3),p(-0.5,-0.5,3),p(0.5,-0.5,3),p(0.5,0.5,4),p(-0.5,0.5,4),p(-0.5,-0.5,4),p(0.5,-0.5,4),p(-0.4,0,3.5),p(0.4,0,3.5),p(0,0,5)],[[0,1,2,3],[4,5,6,7],[0,1,5,4],[1,2,6,5],[2,3,7,6],[3,0,4,7],[8,9,10,11],[12,13,14,15],[8,9,13,12],[9,10,14,13],[10,11,15,14],[11,8,9,13],[16,17,18,19],[20,21,22,23],[16,17,21,20],[17,18,22,21],[18,19,23,22],[19,16,20,23],[24,25,26]],[[70/255,46/255,1/255],[70/255,46/255,1/255],[70/255,46/255,1/255],[70/255,46/255,1/255],[70/255,46/255,1/255],[70/255,46/255,1/255],[187/255,174/255,152/255],[187/255,174/255,152/255],[187/255,174/255,152/255],[187/255,174/255,152/255],[187/255,174/255,152/255],[187/255,174/255,152/255],[255/255,218/255,185/255],[255/255,218/255,185/255],[255/255,218/255,185/255],[255/255,218/255,185/255],[255/255,218/255,185/255],[255/255,218/255,185/255],[1,222/255,117/255]],"autruche")
new Model([p(6,0,0),p(0.5,0,1),p(0.5,0,-1)],[[0,1,2]],[[0.5,0.5,0.5]],"aileAutruche")
